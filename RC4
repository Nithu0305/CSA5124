def KSA(key):
    key_length = len(key)
    S = list(range(256))
    j = 0
    for i in range(256):
        j = (j + S[i] + key[i % key_length]) % 256
        S[i], S[j] = S[j], S[i]
    return S
def PRGA(S, n):
    i = 0
    j = 0
    key = []
    for _ in range(n):
        i = (i + 1) % 256
        j = (j + S[i]) % 256
        S[i], S[j] = S[j], S[i]
        key.append(S[(S[i] + S[j]) % 256])
    return key
def RC4(key, plaintext):
    S = KSA(key)
    keystream = PRGA(S, len(plaintext))
    ciphertext = bytes([plaintext[i] ^ keystream[i] for i in range(len(plaintext))])
    return ciphertext
key = b"Key"
plaintext = b"Hello, World!"
print("Plaintext:", plaintext)
ciphertext = RC4(key, plaintext)
print("Ciphertext:", ciphertext)
decrypted_text = RC4(key, ciphertext)
print("Decrypted:", decrypted_text)
