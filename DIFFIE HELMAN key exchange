import random
def generate_prime():
    while True:
        p = random.randint(100, 1000)
        if all(p % i != 0 for i in range(2, int(p**0.5) + 1)):
            return p
def primitive_root(p):
    factors = {i for i in range(1, p) if pow(i, p - 1, p) == 1}
    return [g for g in range(2, p) if factors == {pow(g, powers, p) for powers in range(1, p)}][0]
def diffie_hellman(p, g):
    a = random.randint(2, p - 2)
    return pow(g, a, p), a
def compute_shared_secret(A, b, p):
    return pow(A, b, p)
p = generate_prime()
g = primitive_root(p)
A, a = diffie_hellman(p, g)
B, b = diffie_hellman(p, g)
shared_secret_Alice = compute_shared_secret(B, a, p)
shared_secret_Bob = compute_shared_secret(A, b, p)
assert shared_secret_Alice == shared_secret_Bob
print(f"Prime number (p): {p}")
print(f"Primitive root (g): {g}")
print(f"Alice's public key (A): {A}, private key (a): {a}")
print(f"Bob's public key (B): {B}, private key (b): {b}")
print(f"Shared secret: {shared_secret_Alice}")
print("Shared secret matches. Key exchange successful!")
