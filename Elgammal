import random

def mod_inverse(a, m):
    # Extended Euclidean Algorithm
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1

def generate_keypair(p):
    # Generate a random private key
    private_key = random.randint(2, p - 2)
    # Calculate the public key
    public_key = pow(2, private_key, p)
    return private_key, public_key

def encrypt(plaintext, public_key, p):
    k = random.randint(2, p - 2)
    c1 = pow(2, k, p)
    c2 = (plaintext * pow(public_key, k, p)) % p
    return c1, c2

def decrypt(c1, c2, private_key, p):
    s = pow(c1, private_key, p)
    plaintext = (c2 * mod_inverse(s, p)) % p
    return plaintext

# Example usage
p = 23  # Prime number for modulo
plaintext = 12
print("Plaintext:", plaintext)

private_key, public_key = generate_keypair(p)
print("Private Key:", private_key)
print("Public Key:", public_key)

c1, c2 = encrypt(plaintext, public_key, p)
print("Encrypted:", (c1, c2))

decrypted_text = decrypt(c1, c2, private_key, p)
print("Decrypted:", decrypted_text)
