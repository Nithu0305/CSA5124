from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_PSS
from Crypto.Hash import SHA256
from Crypto.Random import get_random_bytes
def generate_key_pair():
    key = RSA.generate(2048)
    private_key = key.export_key()
    public_key = key.publickey().export_key()
    return private_key, public_key
def sign_message(message, private_key):
    key = RSA.import_key(private_key)
    h = SHA256.new(message)
    signer = PKCS1_PSS.new(key)
    signature = signer.sign(h)
    return signature
def verify_signature(message, signature, public_key):
    key = RSA.import_key(public_key)
    h = SHA256.new(message)
    verifier = PKCS1_PSS.new(key)
    if verifier.verify(h, signature):
        return True
    else:
        return False
message = b"Hello, World!"
private_key, public_key = generate_key_pair()
print("Message:", message)
signature = sign_message(message, private_key)
print("Signature:", signature)
verified = verify_signature(message, signature, public_key)
print("Signature Verified:", verified)
